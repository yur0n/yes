

import { Bot, Api, session, Context, SessionFlavor, InlineKeyboard } from 'grammy';
import { freeStorage } from "@grammyjs/storage-free";
import { FileApiFlavor, FileFlavor, hydrateFiles } from "@grammyjs/files";
import { conversations, createConversation, ConversationFlavor } from '@grammyjs/conversations';
import { addClientInfo, QR } from './amo_bot/conversations';
import { deleteMsg, deleteMsgTime, replyAndDel } from './amo_bot/functions';
import { getLeads } from './amo_bot/amo'
import { mainMenu } from './amo_bot/menus';
import { updatePoints } from './amo_bot/deliveryVars';

const shops = {
	'üü™ Wildberries': 'WB',
	'üü¶ OZON': 'OZON',
	'üüß Yandex': 'YA',
	'üü® –ó–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ': 'ZY'
}
 
interface SessionData {
  user: {
		telegram?: string;
		name?: string;
		phone?: string;
		city?: string;
		delivery?: string;
		amoId?: number;
	}
	shop?: string;
	leads?: [];
}

type MyContext = Context & SessionFlavor<SessionData> & ConversationFlavor & FileFlavor<Context> & FileApiFlavor<Api>;

const bot = new Bot<MyContext>(process.env.AMO_BOT!);

bot.api.config.use(hydrateFiles(bot.token));
bot.use(session({ 
	initial: () => ({ user: {}, shop: '', leads: [] }), 
	storage: freeStorage<SessionData>(bot.token) }));
bot.use(conversations());
bot.use(createConversation(addClientInfo));
bot.use(createConversation(QR));

bot.api.setMyCommands([{ command: 'start', description: '–ú–µ–Ω—é' } ]);
bot.command('start', async ctx => {
	ctx.session.user.telegram = ctx.from?.id.toString();
	if (ctx.session.user.phone) {
		ctx.reply('‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
			reply_markup: mainMenu
		})
	} else {
		await ctx.conversation.enter('addClientInfo')
	}
	return;
});

bot.command('updateAmo',  async ctx => {
	await ctx.reply('–û–±–Ω–æ–≤–ª—è—é!')
	await updatePoints();
	return ctx.reply('–û–±–Ω–æ–≤–ª–µ–Ω–æ!', {
		reply_markup: mainMenu
	})
})

bot.on('message', async (ctx, next) => {
	if (ctx.msg.text === 'üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ') {
		const { telegram, name, phone, city, delivery } = ctx.session.user
		ctx.reply(`üåêTelegram: ${telegram}\nüë®–§–ò–û: ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüèôÔ∏è–ì–æ—Ä–æ–¥: ${city || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüìç–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, {
			reply_markup: new InlineKeyboard()
												.text('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å')
												.text('üëÅ –°–∫—Ä—ã—Ç—å')
		})
	} 
	const selectedShop = shops[ctx.msg.text as keyof typeof shops];
	if (selectedShop) {
		ctx.session.shop = selectedShop;
		await ctx.conversation.enter('QR')
	}
	if (ctx.msg.text === 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
		if (!ctx.session.leads?.length) {
			return ctx.reply('‚ö™ –í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏–æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞')
		}
		ctx.reply(await getLeads(ctx.session.leads))
	}
	next();
});

bot.on('callback_query', async (ctx, next) => {
	await ctx.answerCallbackQuery();
	const callback = ctx.update.callback_query;
	if (callback?.data == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å') {
		await ctx.conversation.enter('addClientInfo')
	}
	if (callback?.data == 'üëÅ –°–∫—Ä—ã—Ç—å') {
		deleteMsg(ctx, callback?.from.id, callback?.message?.message_id || 1)
	} 
	next();
});


bot.catch((err) => {
	const ctx = err.ctx;
	console.error(`Error while handling update ${ctx.update.update_id}:`);
	const e: any = err.error;
	if (e.description) {
	  console.error("Error in request:", e.description);
	} else {
	  console.error("Unknown error:", e);
	}
});

process.once("SIGINT", () => bot.stop());
process.once("SIGTERM", () => bot.stop());

bot.start();

export default bot;