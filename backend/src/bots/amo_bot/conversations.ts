

import userModel from '../../models/user.model';
import { InlineKeyboard, Keyboard } from 'grammy'
import { mainMenu } from './menus'
import { replyAndDel, deleteMsg, deleteMsgTime } from './functions'

export async function addClientInfo(conversation: any, ctx: any) {
	try {
		await ctx.reply('üë® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)', {
			reply_markup: new Keyboard()
										.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
										.oneTime()
		})
		ctx = await conversation.wait();
		const name = ctx.msg.text;
		if (name === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return;

		await ctx.reply('üì± –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', {
			reply_markup: new Keyboard()
										.requestContact('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä').row()
										.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
										.oneTime()
		});
		ctx = await conversation.wait();
		const phone = ctx.msg.text;
		if (phone === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return;

		await ctx.reply('üì± –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', {
			reply_markup: new InlineKeyboard()
										.text('–ü—É–Ω–∫—Ç 1')
										.text('–ü—É–Ω–∫—Ç 2').row()
										.text('–ü—É–Ω–∫—Ç 3')
										.text('–ü—É–Ω–∫—Ç 4').row()
										.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
		});
		ctx = await conversation.wait();
		const station = ctx.update.callback_query?.data || ctx.msg.text;
		if (!station || station === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return;
		await ctx.reply('‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', {
			reply_markup: mainMenu,
		})


	} catch {

	}
}
function genFileName(store: string, length = 8) {
	const filename = Math.random().toString(36).substring(2, length + 2) + '_' + store;
  return filename.replace(/[^a-z0-9]/gi, '_') + '.jpg';
}

export async function qrWB(conversation: any, ctx: any) {
	try {
		ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç QR-–∫–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º');
		ctx = await conversation.wait();
		if (!ctx.msg.photo) return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
		const photo = (await ctx.api.getFile(ctx.msg.photo[2].file_id));
		const fileName = genFileName('WB')
		await photo.download(`./public/a/${fileName}`)
		const link = `http://176.119.156.143:90/a/${fileName}`
		ctx.reply(link)

	} catch (e) {
		console.log(e)
	}

}






export async function delPhone(conversation: any, ctx: any) {
	try {
		let ask = await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', {
			reply_markup: new InlineKeyboard().text('‚úÖ –î–∞').text('üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å') return
		if (ctx.update.callback_query?.data == '‚úÖ –î–∞') {
			let user = await userModel.findOne({ telegram: ctx.from.id });
			if (user) {
				await user.updateOne({ phone: '' });
				replyAndDel(ctx, '‚úÖ –ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω');
			} else {
				replyAndDel(ctx, '‚ÑπÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
			}
		} else {
			deleteMsg(ctx, ctx.from.id, ctx.message.message_id);
		}
	} catch (error) {
		console.log('Bot error:', error)
		replyAndDel(ctx, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`)
	}
}

export async function addPhone(conversation: any, ctx: any) {
	try {
		let ask = await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', {
			reply_markup: new Keyboard().requestContact('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è').oneTime().resized()
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data) return
		deleteMsg(ctx, ctx.from.id, ctx.message.message_id);
		if (ctx.update.message?.contact?.phone_number) {
			const phone = ctx.update.message.contact.phone_number;
			const user = {
				phone,
				name: ctx.from.first_name? ctx.from.last_name ? `${ctx.from.first_name} ${ctx.from.last_name}` : ctx.from.first_name : '',
				username: ctx.from.username
			}
			await userModel.findOneAndUpdate({ telegram: ctx.from.id }, user, { upsert: true, new: true });
			ctx.reply(`‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤!`);
		} else {
			ctx.reply('‚ùå –í—ã –Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
		// 	replyAndDel(ctx, `‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤!`, 10_000);
		// } else {
		// 	replyAndDel(ctx, '‚ùå –í—ã –Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
		}
		
	} catch (error) {
		console.log('Bot admin error:', error)
		replyAndDel(ctx, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`)
	}
}