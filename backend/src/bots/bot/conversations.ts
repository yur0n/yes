

import userModel from '../../models/user.model';
import { InlineKeyboard, Keyboard } from 'grammy'
import { replyAndDel, deleteMsg, deleteMsgTime } from './functions'

export async function delPhone(conversation: any, ctx: any) {
	try {
		let ask = await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', {
			reply_markup: new InlineKeyboard().text('‚úÖ –î–∞').text('üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å') return
		if (ctx.update.callback_query?.data == '‚úÖ –î–∞') {
			let user = await userModel.findOne({ telegram: ctx.from.id });
			if (user) {
				await user.updateOne({ phone: '' });
				replyAndDel(ctx, '‚úÖ –ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω');
			} else {
				replyAndDel(ctx, '‚ÑπÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
			}
		} else {
			deleteMsg(ctx, ctx.from.id, ctx.message.message_id);
		}
	} catch (error) {
		console.log('Bot error:', error)
		replyAndDel(ctx, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`)
	}
}

export async function addPhone(conversation: any, ctx: any) {
	try {
		let ask = await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', {
			reply_markup: new Keyboard().requestContact('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è').oneTime().resized()
		});
		ctx = await conversation.wait();
		deleteMsg(ctx, ask.chat.id, ask.message_id)
		if (ctx.update.callback_query?.data) return
		deleteMsg(ctx, ctx.from.id, ctx.message.message_id);
		if (ctx.update.message?.contact?.phone_number) {
			const phone = ctx.update.message.contact.phone_number;
			const user = {
				phone,
				name: ctx.from.first_name? ctx.from.last_name ? `${ctx.from.first_name} ${ctx.from.last_name}` : ctx.from.first_name : '',
				username: ctx.from.username
			}
			await userModel.findOneAndUpdate({ telegram: ctx.from.id }, user, { upsert: true, new: true });
			replyAndDel(ctx, `‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤!`, 10_000);
		} else {
			replyAndDel(ctx, '‚ùå –í—ã –Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
		}
		
	} catch (error) {
		console.log('Bot admin error:', error)
		replyAndDel(ctx, `–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`)
	}
}